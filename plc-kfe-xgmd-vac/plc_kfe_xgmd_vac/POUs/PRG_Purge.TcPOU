<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4022.16">
  <POU Name="PRG_Purge" Id="{a79f4482-bdf5-4b0d-9d35-039b4e6b3713}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM PRG_Purge
VAR
	step: INT:=0;

//ADD PRAGMAS

	AllGasVlvCls 		: BOOL; (* All Gas Manifold Valves are closed when True, not including VIC80, 81 or VGP40 *)
	WatchdogTmr			: TON;  (* Purge Watchdog Timer*)

	StartWatchdogTmr 	: BOOL;
	WatchdogPeriod 		: TIME;

	NeedleVlvPurgeTmr	: TON;	(* Declaration for the needle valve Purge timer *)
	tNeedlePurgeTime		: TIME:=T#30S;
	BurpET				: TIME;
	NeedlePurgeRun		: BOOL;
	NeedlePurgeDone		: BOOL;
	NeedlePurgeRepeat	: INT:= 2;
	VCN_Timer	:TON;
	


	//PRAGMA
	GBA80Tmr			: TON;
	GBA80Time			: TIME:=T#20S;
	GBATimeDone			: BOOL;

	CATCH : INT;
	CATCH1 : INT;
	
	// Timers
	VVC_81_Timer : TON;
	VVC_82_Timer : TON;
	VVC_81_Time			: TIME:=T#60S;
	VVC_82_Time			: TIME:=T#120S;
	
	
	

END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[
(* 		PURGE CYCLE
	The purge cycle cosists of the following steps;	
	1. Close all gas valves 83-86
	2. Close Needle valve 
	3. Fully open VGP:40
	4. PUMP DOWN MANIFOLD: Open VIC82 for a certain peroid of time or till cetrain pressure
	5. Open VIC:81 and keep it open while the manifold pumps down to pressure set point
	6. BURP NEEDLE VALVE: Once the manifold is pumped down, open the needle valve (burp) to evacuate gases that may be trapped in its mechanism
	7. Close needle valve
	8. Close VIC:81 and VIC:82
	9. Release VGP:40

*)
tNeedlePurgeTime := INT_TO_TIME(iNeedleBurpTIME);

CASE step OF
		0: // READY STATE
		IF (bStartPurge_sw) Then
			step:=10;
			bPurgeActive := TRUE;
			bPurgeDone := FALSE;
		END_IF

10: // start purge sequence by closing all gas valves
	VVC_80.M_Set_OPN_SW(false);
	VVC_83.M_Set_OPN_SW(false);
	VVC_84.M_Set_OPN_SW(false);
	VVC_85.M_Set_OPN_SW(false);
	VVC_86.M_Set_OPN_SW(false);
	
	if  (NOT VVC_83.iq_stValve.q_xOPN_DO) AND (NOT VVC_83.iq_stValve.q_xOPN_DO) AND(NOT VVC_84.iq_stValve.q_xOPN_DO) AND (NOT VVC_85.iq_stValve.q_xOPN_DO) AND (NOT VVC_86.iq_stValve.q_xOPN_DO) then
		step:= 20;
	END_IF
	
20: //Close Needle valve 
	VCN_50.M_ValveControl(E_VCN.CloseValve);
	// wait for a period of time to ensure that the Valve is fully closed
	IF (VCN_Timer.Q) THEN
		step:=30;
	END_IF
	
	
30: //Fully open VGP:40
	VGP_50.M_ValveControl(E_VCN.OpenValve); 
	IF NOT(VGP_50.q_stVGP.state = E_MoveState.MOVESTATE_READY ) THEN // wait until the VGP encoder reads Open
		step:=31;
	END_IF
	if (VGP_50.q_stVGP.pv_xError )then
		step:=900+step;
	END_IF
31: 
	IF (VGP_50.q_stVGP.state = E_MoveState.MOVESTATE_READY ) THEN // wait until the VGP encoder reads Open //use motion ready
		step:=40;
	END_IF
	if (VGP_50.q_stVGP.pv_xError )then
		step:=900+step;
	END_IF
	
40: // open vavle 80 to pump down all the way to the needle valve
	VVC_80.M_Set_OPN_SW(TRUE);
	if (VVC_80.iq_stValve.q_xOPN_DO ) THEN
		step:=41;
	END_IF


41 :  //PUMP DOWN MANIFOLD: Open VIC82 for a certain peroid of time or till cetrain pressure
	VVC_82.M_Set_OPN_SW(TRUE);
	if (VVC_82.iq_stValve.q_xOPN_DO ) AND (VVC_82_Timer.Q) THEN
		step:=50;
	END_IF

50:// Open VIC:81 and keep it open while the manifold pumps down to pressure set point
	VVC_81.M_Set_OPN_SW(TRUE);
	IF (VVC_81.iq_stValve.q_xOPN_DO ) AND (VVC_81_Timer.Q) THEN // or a certain pressure reading and check timeouts
		step:=60;
	END_IF

51://Close VIC:80 VIC:81 and VIC:82
	VVC_80.M_Set_OPN_SW(false);
	VVC_81.M_Set_OPN_SW(false);
	VVC_82.M_Set_OPN_SW(false);
	
	IF (NOT VVC_80.iq_stValve.q_xOPN_DO) AND (NOT VVC_81.iq_stValve.q_xOPN_DO) AND(NOT VVC_82.iq_stValve.q_xOPN_DO) THEN
		step:=60;
	END_IF

60: //BURP NEEDLE VALVE: Once the manifold is pumped down, open the needle valve (burp) to evacuate gases that may be trapped in its mechanism
	VCN_50.M_ValveControl(E_VCN.OpenValve); 
	// wait for a period of time to ensure that the Valve is fully open
	IF (VCN_Timer.Q) THEN
		step:=70;
	END_IF

70: //Close Needle valve 
	VCN_50.M_ValveControl(E_VCN.CloseValve);
	// wait for a period of time to ensure that the Valve is fully closed
	IF (VCN_Timer.Q) THEN
		step:=80;
	END_IF

80: // Repeat
	IF (NeedlePurgeRepeat > 0) THEN
		NeedlePurgeRepeat := NeedlePurgeRepeat-1;
		step:= 60;
	ELSE
		NeedlePurgeRepeat := 2;
		step:=90;				
	END_IF
	
	

90: //Release VGP:40
	VGP_50.M_ValveControl(E_VCN.ManualControl);
	VGP_50.q_stVGP.rReqPosition:= 50; //50% open
	IF NOT(VGP_50.q_stVGP.state = E_MoveState.MOVESTATE_READY ) THEN // wait until the VGP encoder reads Open //use motion ready
		step:=91;
	END_IF
	if (VGP_50.q_stVGP.pv_xError )then
		step:=900+step;
	END_IF
	
91: 
	IF (VGP_50.q_stVGP.state = E_MoveState.MOVESTATE_READY ) THEN // wait until the VGP encoder reads Open //use motion ready
		step:=100;
	END_IF
	if (VGP_50.q_stVGP.pv_xError )then
		step:=900+step;
	END_IF
  
100: // DONE
	bStartPurge_sw := false;
	bPurgeActive := false;
	bPurgeDone := TRUE;
	
900: //Error
	VVC_80.M_Set_OPN_SW(false);
	VVC_81.M_Set_OPN_SW(false);
	VVC_82.M_Set_OPN_SW(false);
	VVC_83.M_Set_OPN_SW(false);
	VVC_84.M_Set_OPN_SW(false);
	VVC_85.M_Set_OPN_SW(false);
	VVC_86.M_Set_OPN_SW(false);
	VCN_50.M_ValveControl(E_VCN.CloseValve);
	//VGP_50.M_ValveControl(E_VCN.CloseValve); // CLOSE or OPEN to pump down

END_CASE


//shouldn't be here
(*
if (bPurgeActive) then
	VVC_83.i_xExtILK_OK := VVC_84.i_xExtILK_OK := VVC_85.i_xExtILK_OK := VVC_86.i_xExtILK_OK := false;
END_IF
*)

//Errors
if (step >900 ) Then
	// show error and step
END_IF


//Timers
VVC_81_Timer(IN:= (step = 50), PT:=VVC_81_Time);
VVC_82_Timer(IN:= (step = 41), PT:=VVC_82_Time);
VCN_Timer(IN:= (step = 20) OR (step = 60) OR (step = 70), PT:=tNeedlePurgeTime);


/// vcn and vgp on manual or auto?? manual, until the Go or auto button is pressed??]]></ST>
    </Implementation>
    <LineIds Name="PRG_Purge">
      <LineId Id="48" Count="24" />
      <LineId Id="233" Count="0" />
      <LineId Id="73" Count="0" />
      <LineId Id="229" Count="1" />
      <LineId Id="76" Count="30" />
      <LineId Id="237" Count="3" />
      <LineId Id="236" Count="0" />
      <LineId Id="235" Count="0" />
      <LineId Id="234" Count="0" />
      <LineId Id="107" Count="9" />
      <LineId Id="244" Count="1" />
      <LineId Id="251" Count="1" />
      <LineId Id="250" Count="0" />
      <LineId Id="246" Count="0" />
      <LineId Id="248" Count="1" />
      <LineId Id="243" Count="0" />
      <LineId Id="117" Count="14" />
      <LineId Id="137" Count="0" />
      <LineId Id="258" Count="1" />
      <LineId Id="261" Count="1" />
      <LineId Id="264" Count="1" />
      <LineId Id="260" Count="0" />
      <LineId Id="257" Count="0" />
      <LineId Id="253" Count="0" />
      <LineId Id="138" Count="22" />
      <LineId Id="184" Count="1" />
      <LineId Id="313" Count="0" />
      <LineId Id="317" Count="1" />
      <LineId Id="314" Count="2" />
      <LineId Id="312" Count="0" />
      <LineId Id="186" Count="0" />
      <LineId Id="319" Count="0" />
      <LineId Id="161" Count="22" />
      <LineId Id="5" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>