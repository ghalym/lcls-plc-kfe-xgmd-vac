<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4022.18">
  <POU Name="PRG_PressureControl" Id="{8ef02f00-e542-4b0e-902f-3d7061b2691f}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM PRG_PressureControl
VAR CONSTANT
		nDataTable_NumberOfRows : INT:=9;
END_VAR
VAR
	
	fActualValue				: FLOAT;
	fCtrlOutput						: FLOAT;
	fBasicCtrlOutput						: FLOAT;
	f_Rep_POS: Float;
	

	fManValue											: FLOAT;
	bExtrapolate										: BOOL;
	fManSyncValue			: FLOAT;
	bSync						: BOOL;

	bHold						: BOOL;

	eMode						: E_CTRL_MODE;
	stCTRL_PID_PARAMS		: ST_CTRL_PID_PARAMS;
	stCTRL_LIN_INTERPOLATION_PARAMS		: ST_CTRL_LIN_INTERPOLATION_PARAMS;

	eErrorId					: E_CTRL_ERRORCODES;
	bARWactive				: BOOL;
	arrTable	: ARRAY[1..31,1..2] OF FLOAT;
	(* controller  *)
	fbCTRL_PID					: FB_CTRL_PID;
	fbCTRL_Normalize 	: FB_CTRL_NORMALIZE;
	fbCTRL_LIN_INTERPOLATION					: FB_CTRL_LIN_INTERPOLATION;
	fbCTRL_DEADBAND						: FB_CTRL_DEADBAND;
	stCTRL_DEADBAND_PARAMS			: ST_CTRL_DEADBAND_PARAMS;
	
	bInit						: BOOL		:= TRUE;
	wait : time := T#10S;
	FTrig: F_TRIG;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[//Set VRC upper limit
IF bInit
THEN
	VCN_50.M_SetThrottle(30); // default at start up, should be changed through epics pv
END_IF
//VCN //bAdditionalVCNIlk
IF (bAdditionalVCNIlk) THEN
	VCN_50.i_xExtIlkOK := ( fb_EM2K0_XGMD_GCC_10.IG.xAT_VAC AND  fb_EM2K0_XGMD_GCC_20.IG.xAT_VAC AND fb_EM2K0_XGMD_GCC_30.IG.xAT_VAC AND  fb_EM2K0_XGMD_GCC_40.IG.xAT_VAC
							AND  fb_EM2K0_XGMD_GCC_50.IG.xAT_VAC AND  fb_EM2K0_XGMD_GCC_60.IG.xAT_VAC AND fb_EM2K0_XGMD_GCC_70.IG.xAT_VAC AND  fb_EM2K0_XGMD_GCC_80.IG.xAT_VAC  AND  fb_EM2K0_XGMD_GCC_90.IG.xAT_VAC)
								AND  fb_EM2K0_XGMD_GPI_50.PG.xAT_VAC AND (NOT VVC_81.iq_stValve.q_xOPN_DO) AND(NOT VVC_82.iq_stValve.q_xOPN_DO);
	ELSE
		
		VCN_50.i_xExtIlkOK :=  fb_EM2K0_XGMD_GPI_50.PG.xAT_VAC AND (NOT VVC_81.iq_stValve.q_xOPN_DO) AND(NOT VVC_82.iq_stValve.q_xOPN_DO);
END_IF

VCN_50(i_xExtIlkOK :=, i_ReqPos:= );

(* Gauge selection *)
(*Assign reading to psuedo gauge*)
IF (fb_EM2K0_XGMD_GCC_50.IG.rPRESS <=0.0001) AND (fb_EM2K0_XGMD_GCC_50.IG.rPRESS >0) THEN GCP := fb_EM2K0_XGMD_GCC_50.IG;
			ElSE GCP := fb_EM2K0_XGMD_GPI_50.PG;
END_IF
		 

(*-------------------------------------------------------------------*)
(*             PI CONTROL          *)
(*-------------------------------------------------------------------*)


IF bInit
THEN
	(*FBCNTRL*)
	(* init parameter struct *)
	stCTRL_PID_PARAMS.tCtrlCycleTime		:= T#10ms;
	stCTRL_PID_PARAMS.tTaskCycleTime		:= T#10ms;
	stCTRL_PID_PARAMS.fKp					:= fKp1;			(* proportional gain Kp				*)
	stCTRL_PID_PARAMS.tTn					:= T#500ms;		(*  Tn									*)
	stCTRL_PID_PARAMS.tTv					:= T#200ms;	(*  Tv									*)
	stCTRL_PID_PARAMS.tTd					:= T#100ms;	(*  Td									*)
	stCTRL_PID_PARAMS.fOutMaxLimit			:=  78;			(* maximum output limit				*)
	stCTRL_PID_PARAMS.fOutMinLimit			:=  -100;			(* minimum output limit				*)

	
	(* init array with the interpolation points  *)
	(* 	fIn					 |		fOut		*)
(* 	fIn					 |		fOut		*)
	arrTable[1,1] := 0;		arrTable[1,2] := 5;
	arrTable[2,1] := 0.0000412;		arrTable[2,2] := 34;
	arrTable[3,1] := 0.001282;		arrTable[3,2] := 36;
	arrTable[4,1] :=  0.002136;	    arrTable[4,2] := 38;
	arrTable[5,1] :=  0.005884;	    arrTable[5,2] := 40;
	arrTable[6,1] := 0.00907;		arrTable[6,2] := 42;
	arrTable[7,1] := 0.01183;		arrTable[7,2] := 44;
	arrTable[8,1] := 0.01799;	    arrTable[8,2] := 46;
	arrTable[9,1] := 0.0302;	    arrTable[9,2] := 47;
	arrTable[10,1] := 0.0417;		arrTable[10,2] := 50;
	arrTable[11,1] := 0.06635;		arrTable[11,2] := 51;
	arrTable[12,1] := 0.08118;		arrTable[12,2] := 53;
	arrTable[13,1] := 0.0998;		arrTable[13,2] := 56;
	arrTable[14,1] := 0.10644;		arrTable[14,2] := 56.5;
	arrTable[15,1] := 0.1359;		arrTable[15,2] := 58;
	arrTable[16,1] := 0.1929;		arrTable[16,2] := 60;
	arrTable[17,1] := 0.2922;		arrTable[17,2] := 62;
	arrTable[18,1] := 0.3428;	    arrTable[18,2] := 64;
	arrTable[19,1] :=  0.405;;	    arrTable[19,2] :=66;
	arrTable[20,1] := 0.481;		arrTable[20,2] := 68;
	arrTable[21,1] := 0.5542;		arrTable[21,2] := 69;
	arrTable[22,1] := 0.6333;	    arrTable[22,2] := 70;
	arrTable[23,1] := 0.7901;	    arrTable[23,2] := 72;
	arrTable[24,1] := 0.9307;		arrTable[24,2] := 73.04;
	arrTable[25,1] := 1.0448;		arrTable[25,2] := 73.64;
	arrTable[26,1] := 1.31919;;		arrTable[26,2] := 74.45;
	arrTable[27,1] :=  1.324;		arrTable[27,2] :=74.46;
	arrTable[28,1] := 1.71941;	arrTable[28,2] := 75;
	arrTable[29,1] :=  1.963194;		arrTable[29,2] :=75.5;
	arrTable[30,1] := 1.99999;	arrTable[30,2] := 75.505;
	arrTable[31,1] := 2;	arrTable[31,2] := 75.55;
	
	
	(* init parameter struct *)
	stCTRL_LIN_INTERPOLATION_PARAMS.tCtrlCycleTime					:= T#10ms;
	stCTRL_LIN_INTERPOLATION_PARAMS.tTaskCycleTime					:= T#10ms;
	stCTRL_LIN_INTERPOLATION_PARAMS.nDataTable_NumberOfRows		:= INT_TO_UINT(31);

	
	(* set the mode to ACTIVE --> normal operation *)
	eMode							:= eCTRL_MODE_ACTIVE;
	
	(* reset the init flag *)
	bInit							:= FALSE;
END_IF
(* set the addresses *)
	stCTRL_LIN_INTERPOLATION_PARAMS.pDataTable_ADR			:= ADR(arrTable);
	stCTRL_LIN_INTERPOLATION_PARAMS.nDataTable_SIZEOF		:= SIZEOF(arrTable);
   
fSetpointValue:= LIMIT(0,fSetpointValue,0.001);
	
if (VVC_80.M_IsClosed() ) THEN 
		//eMode	:= eCTRL_MODE_PASSIVE;
		fSetpointValue :=0; 
END_IF
	
if (bGo) THEN
	VCN_50.i_ReqPos:=  fbCTRL_LIN_INTERPOLATION.fOut + fbCTRL_PID.fOut;
	IF (bReset) THEN
	(* set the mode to RESET*)
	eMode							:= eCTRL_MODE_RESET   ;
	VCN_50.M_ValveControl(CloseValve);
	//bReset := False;
	ELSE
		(* set the mode to ACTIVE --> normal operation *)
	eMode							:= eCTRL_MODE_ACTIVE   ;
 	VCN_50.M_ValveControl(PressureControl);
	END_IF
END_IF
If(FTrig.Q)THEN
		eMode							:= eCTRL_MODE_PASSIVE;
		VCN_50.M_ValveControl(CloseValve);
		fSetpointValue :=0;
END_IF	
	
(* call interpolation fb *)
fbCTRL_LIN_INTERPOLATION(
	fIn:= fSetpointValue , 
	fManValue:= fManValue , 
	bExtrapolate:= bExtrapolate, 
	eMode:= eMode, 
	stParams:= stCTRL_LIN_INTERPOLATION_PARAMS,
	fOut=> , 
	bInIsGreaterThanMaxElement=> , 
	bInIsLessThanMinElement=> , 
	eState=> , 
	eErrorId=> , 
	bError=> );	
	
	

(* call controller *)
fbCTRL_PID(		fSetpointValue		:= fSetpointValue,
					fActualValue		:= ,
					fManSyncValue	:= ,
					bSync				:= bSync,
					eMode				:= eMode,
					bHold				:= bHold,
					stParams			:= stCTRL_PID_PARAMS,
					fOut				=> ,
					bARWactive		=> bARWactive,
					eErrorId			=> eErrorId,
					bError				=> 
				);
				
				(*deadband/clipper *)

(* call function block *)
stCTRL_DEADBAND_PARAMS.fThreshold	:=  fSetpointValue*0.0016 ;
(*fbCTRL_DEADBAND	(	fIn					:= ,
					stParams			:= stCTRL_DEADBAND_PARAMS,
					bInIsUnderThreshold => ,
					eErrorId			=> ,
					bError				=> 
				);*)

bError := fbCTRL_PID.bError OR fbCTRL_LIN_INTERPOLATION.bError;
				

FTRIG(CLK := bGo);

]]></ST>
    </Implementation>
  </POU>
</TcPlcObject>