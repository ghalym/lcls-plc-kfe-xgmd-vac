<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.3">
  <POU Name="FB_VGP" Id="{7843698b-889d-4cb9-a659-0a84e4308c25}" SpecialFunc="None">
    <Declaration><![CDATA[(* This function implements the Basic functions for the Vat Motorized valve*)
{attribute 'no_check'}
FUNCTION_BLOCK FB_VGP
VAR_INPUT
	i_xExtIlkOK	:	BOOL; //External Interlock, SET to TRUE if not used
	i_xOpenIlkOK: BOOL; //Interlock Bit that allows the valve to open
	i_xCloseIlkOK: BOOL; //Interlock Bit that allows the valve to Close
	
	i_ReqPos	:	REAL; //Requested position
	
	arrTable	: ARRAY[1..14,1..2] OF FLOAT;
END_VAR
VAR_OUTPUT
	{attribute 'pytmc' := '
    pv:
	'}
	q_stVGP	:	ST_VGP; // valve structure
END_VAR
VAR_IN_OUT
	
END_VAR

VAR CONSTANT
	rUpperLimit	:	REAL:=100;	//Percentage Upper limit on valve open
	rClosePosition : REAL:=0; // Encoder Min. Fully Closed
	rMaxDiffPressure: REAL:= 22.5; //Torr
END_VAR

VAR
	rOpenPosition: REAL:=1645; // Encoder MAX. Fully Open
	rTargetPosition : REAL;
	rTargetVelocity: REAL:=30;
	rHomingVelocity: REAL:=10;
	rHomingDistance: REAL:=-20;//every 150 is 10% , 1%  is 14.975
	rOldTargetPosition: REAL;
	rHyst:REAL :=10;	
	// 
	/// axis reference data structure 
	Axis: AXIS_REF;
	//
	InfoData_State AT %I*: UINT ;
	
	// Axis MC functions

	fbPowerAxis: MC_Power;
	/// debug function block output data 
	PowerAxisOut: ST_McOutputs;
	fbMoveAxisABS: MC_MoveAbsolute;
	/// debug function block output data 
	MoveAbsoluteOut: ST_McOutputs;
	fbMoveAxisABS2: MC_MoveAbsolute;
	/// debug function block output data 
	MoveAbsoluteOut2: ST_McOutputs;
	
	fbReset: MC_Reset;
	/// debug function block output data 
	ResetOut: ST_McOutputs;
	MoveAxisREL: MC_MoveAbsolute;
	MoveRelativeOut: ST_McOutputs;
	
	
	
	rOverride: LREAL := 100;
	fbHalt: MC_Halt;
	
	
	// Homing Functions
	bGo:BOOL := FALSE; //to execute motion
	bHome:BOOL :=FALSE; // should be set to true
	bEnable:Bool; //to be removed
	fbMoveRel: MC_MoveRelative;
	fbSetPosition: MC_SetPosition;
	fbWriteParameter: MC_WriteBoolParameter;
	HomeState: E_HomeState;
	
	// For Monitoring while Axis moving
	rPrevEncoderPosition : REAL;
	// interpolation
	bInit : BOOL := TRUE;
	eMode           : E_CTRL_MODE;
	iCounter:INT;
	//CONTROL
	stCTRL_LIN_INTERPOLATION_PARAMS		: ST_CTRL_LIN_INTERPOLATION_PARAMS;
	fbCTRL_LIN_INTERPOLATION					: FB_CTRL_LIN_INTERPOLATION;
	arrTable_ENC : ARRAY[1..14,1..2] OF FLOAT;
	//Readdback
	stCTRL_LIN_INTERPOLATION_PARAMS_ENC		: ST_CTRL_LIN_INTERPOLATION_PARAMS;
	fbCTRL_LIN_INTERPOLATION_ENC					: FB_CTRL_LIN_INTERPOLATION;

	// Logger
	 // For logging
    fbLogger : FB_LogMessage := (eSubsystem:=E_SubSystem.VACUUM);
    ePrevState : E_VCN;
    tErrorPresent : R_TRIG;
    tAction : R_TRIG; // Primary action of this device (OPN_DO, PUMP_RUN, etc.)
    
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[/// Interpolation  function initialization
ACT_INIT();

// Interlocking
q_stVGP.xIlkOK := i_xExtIlkOK;
(*Checking which Control mode is selected*)
IF q_stVGP.xIlkOK AND NOT (q_stVGP.pv_xError) THEN
	IF q_stVGP.eValveControl = OpenValve THEN
		q_stVGP.rReqPosition := rUpperLimit;
	ELSIF q_stVGP.eValveControl = CloseValve THEN
		q_stVGP.rReqPosition := 0;
	ELSIF q_stVGP.eValveControl = ManualControl THEN
		q_stVGP.rReqPosition := LIMIT(0, q_stVGP.rReqPosition, rUpperLimit);
	ELSIF q_stVGP.eValveControl = PressureControl THEN
		 q_stVGP.rReqPosition := LIMIT(0, i_ReqPos, rUpperLimit);
	END_IF
ELSE
	q_stVGP.rReqPosition := 0;
	q_stVGP.eValveControl := CloseValve;//CloseValve;
	bGo:=FALSE;
END_IF


//Check the Drive State

IF (*(InfoData_State<>16#8) OR*) (q_stVGP.eState = ERROR) THEN
	q_stVGP.pv_xError:=TRUE;
ELSE
	q_stVGP.pv_xError:=FALSE;
	// Call function to execute move
	// call motion function blocks???
END_IF


IF (q_stVGP.pv_xABORT_SW ) THEN
	q_stVGP.pv_xABORT_SW := FALSE;
	q_stVGP.eState:= ABORT;
	HomeState:= H_READY;
END_IF


ACT_LIN_INTERPOLATION();
ACT_AXIS();
ACT_HOME();
ACT_MONITOR();



]]></ST>
    </Implementation>
    <Action Name="ACT_AXIS" Id="{f0964c2f-e830-4834-a42a-7a3a45bba581}">
      <Implementation>
        <ST><![CDATA[//update the axis status
AXIS();
q_stVGP.rEnoder_Position := LREAL_TO_REAL(Axis.NcToPlc.ActPos); // encoder position


IF NOT (i_xExtIlkOK) THEN
	q_stVGP.eState := NEWTARGETPOSITION;
END_IF
//Homing STATE is missing

// state machine for axis motion
	(* move axis using a state machine *)
	CASE q_stVGP.eState OF

		INIT :	(* initialisation *)
			(* initialize all function blocks *)
			fbMoveAxisABS.Execute := FALSE;
			fbMoveAxisABS2.Execute := FALSE;
			fbReset.Execute := FALSE;
			fbHALT.Execute :=FALSE;//
			q_stVGP.eState := ENABLE; // Check homing first
			HomeState:= H_READY; 

		ENABLE :
			fbPowerAxis.Enable :=  TRUE;
			fbPowerAxis.Enable_Positive := TRUE;
			fbPowerAxis.Enable_Negative := TRUE;
			IF fbPowerAxis.Status THEN
				q_stVGP.eState := READY;
			ELSIF fbPowerAxis.Error THEN
				q_stVGP.eState := ERROR;
			END_IF
		
		READY: // waiting for move command
			IF NOT fbPowerAxis.Status THEN
				q_stVGP.eState := ENABLE;
			ELSIF fbPowerAxis.Error THEN
				q_stVGP.eState := ERROR;
			END_IF
			IF (HomeState = H_READY) AND (q_stVGP.pv_xHome_SW) THEN
					HomeState:= H_INIT;
					q_stVGP.pv_xHome_SW:=false;
					q_stVGP.eState := HOME;
					ELSE 
					q_stVGP.eState := READY;
				END_IF
			IF (q_stVGP.pv_xGo_SW) AND i_xExtIlkOK(* AND( rOldTargetPosition <> rTargetPosition) *) THEN
				q_stVGP.pv_xGo_SW := false;
				q_stVGP.eState := NEWTARGETPOSITION;	
			END_IF

			
		HOME:
				if (HomeState = H_DONE) THEN
					 q_stVGP.eState := INIT;
					 q_stVGP.pv_xHomed := TRUE;
					 HomeState := H_READY;
				END_IF
				
				if (HomeState = H_ERROR) THEN
					q_stVGP.eState := ERROR;
					  q_stVGP.pv_xHomed := FALSE;
				END_IF
				
		NEWTARGETPOSITION:
			fbMoveAxisABS.Position := rTargetPosition;	
			fbMoveAxisABS.Velocity := rTargetVelocity;		
			//fbMoveAxisABS.BufferMode := MC_BlendingNext;
			fbMoveAxisABS.Execute := TRUE;
			IF fbMoveAxisABS.Active  THEN
				(* axis is executing job but is not yet finished *)
				fbMoveAxisABS.Execute := FALSE;
				(* leave this state and buffer a second command *)
				q_stVGP.eState := MOVING; 
			ElSIF fbMoveAxisABS.Done THEN
				fbMoveAxisABS.Execute := FALSE;
				q_stVGP.eState := READY;
			ELSIF fbMoveAxisABS.CommandAborted OR fbMoveAxisABS.Error THEN
				q_stVGP.eState := ERROR;
			END_IF
			
				
		MOVING://
			IF fbMoveAxisABS.CommandAborted OR fbMoveAxisABS.Error THEN
				q_stVGP.eState := ERROR;
			END_IF	
			IF NOT ( Axis.Status.Moving) OR (fbMoveAxisABS.Done) THEN //(fbMoveAxisABS.Done) AND (fbMoveAxisABS2.Done) THEN
				q_stVGP.eState := READY;	
			END_IF
			
		
		HALT:
			fbHALT.Execute :=TRUE;
			IF Axis.Status.Error THEN
				q_stVGP.eState := RESET;	(* axis error requires reset *)
			ELSE
				q_stVGP.eState := INIT;		(* function block errors don't need a reset *)
			END_IF
		
		ERROR :
			IF HomeState = H_READY THEN
				q_stVGP.eState := RESET;
			ELSE
				q_stVGP.eState := HOME;
			END_IF

		RESET :
			//fbReset.Execute := TRUE;
			IF fbReset.Done THEN q_stVGP.eState :=INIT;
			//	HomeState := H_READY;
			ELSIF fbReset.Error THEN
				q_stVGP.eState := ERROR; (* keep trying to reset*)
			END_IF
			
		ABORT:
			fbMoveAxisABS.Execute := FALSE;
			fbMoveAxisABS2.Execute := FALSE;
			fbReset.Execute := FALSE;
			(* save target position*)
			rOldTargetPosition := 	q_stVGP.i_iPosition;
			fbHALT.Execute :=FALSE;
			fbPowerAxis.Enable := FALSE;
			fbPowerAxis.Enable_Positive := FALSE;
			fbPowerAxis.Enable_Negative := FALSE;
			q_stVGP.eState := ENABLE; // Check homing first

	END_CASE





	
/// Motion Function Blocks
(* AXIS POWER*)
fbPowerAxis(
	Axis:= Axis, 
	Enable:= , 
	Enable_Positive:= i_xOpenIlkOK, 
	Enable_Negative:= , 
	Override:= rOverride, 
	BufferMode:= , 
	Options:= , 
	Status=>  , 
	Busy=> PowerAxisOut.Busy , 
	Active=> PowerAxisOut.Active , 
	Error=> PowerAxisOut.Error, 
	ErrorID=> PowerAxisOut.ErrorID);
(* AXIS MOVE ABSOLUTE*)
fbMoveAxisABS(
	Axis:= Axis , 
	Execute:= , 
	Position:= , 
	Velocity:= , 
	Acceleration:= , 
	Deceleration:= , 
	Jerk:= , 
	BufferMode:= MC_BlendingNext , 
	Options:= , 
	Done=>MoveAbsoluteOut.Done, 
	Busy=> MoveAbsoluteOut.Busy, 
	Active=> MoveAbsoluteOut.Active, 
	CommandAborted=> MoveAbsoluteOut.CommandAborted , 
	Error=> MoveAbsoluteOut.Error, 
	ErrorID=> MoveAbsoluteOut.ErrorID);
	(* AXIS MOVE ABSOLUTE*)
fbMoveAxisABS2(
	Axis:= Axis , 
	Execute:= , 
	Position:= , 
	Velocity:= , 
	Acceleration:= , 
	Deceleration:= , 
	Jerk:= , 
	BufferMode:= MC_BlendingNext , 
	Options:= , 
	Done=>MoveAbsoluteOut2.Done, 
	Busy=> MoveAbsoluteOut2.Busy, 
	Active=> MoveAbsoluteOut2.Active, 
	CommandAborted=> MoveAbsoluteOut2.CommandAborted , 
	Error=> MoveAbsoluteOut2.Error, 
	ErrorID=> MoveAbsoluteOut2.ErrorID);
(*AXIS RESET*)
fbReset(
	Axis:= Axis, 
	Execute:= This^.q_stVGP.pv_xReset_SW , 
	Done=>ResetOut.Done , 
	Busy=>ResetOut.Busy , 
	Error=> ResetOut.Error, 
	ErrorID=> ResetOut.ErrorID);

(*HALT*)
fbHalt(
	Axis:= Axis, 
	Execute:= , 
	Deceleration:= , 
	Jerk:= , 
	BufferMode:= MC_BlendingNext , 
	Options:= , 
	Done=> , 
	Busy=> , 
	Active=> , 
	CommandAborted=> , 
	Error=> , 
	ErrorID=> );
	

/// ERROR
IF Axis.Status.Error  THEN
	q_stVGP.eState := ERROR;	
END_IF;	
	
// Error Handling
if( fbPowerAxis.Error and fbPowerAxis.Active ) then 
	This^.q_stVGP.pv_xError:= fbPowerAxis.Error;
	This^.q_stVGP.nErrorID:= fbPowerAxis.ErrorID;
END_IF
if( fbMoveAxisABS.Error and fbMoveAxisABS.Active ) then 
	This^.q_stVGP.pv_xError:= fbMoveAxisABS.Error;
	This^.q_stVGP.nErrorID:= fbMoveAxisABS.ErrorID;
END_IF

IF This^.q_stVGP.pv_xReset_SW THEN This^.q_stVGP.pv_xReset_SW:=FALSE; END_IF
(*Convert nErrorID to string*)
This^.q_stVGP.sErrorMessage:=WORD_TO_HEXSTR(in:=TO_WORD(This^.q_stVGP.nErrorID) , iPrecision:= 4, bLoCase:=0 );

This^.q_stVGP.xBusy := (NOT(q_stVGP.eState = READY) AND (HomeState = H_READY));


]]></ST>
      </Implementation>
    </Action>
    <Action Name="ACT_HOME" Id="{7aa29c8d-1359-4aa9-9cbb-1c0e5473ba5a}">
      <Implementation>
        <ST><![CDATA[

CASE HomeState OF
	H_READY:
		fbSetPosition.Execute := FALSE;
		fbWriteParameter.Execute := FALSE;
		fbMoveRel.Execute := FALSE;
	
	H_INIT:
	HomeState:=H_RESET_LL;

		
	H_RESET_LL:
		// disable soft limits in order to be able to move the drive
		fbWriteParameter.ParameterNumber := MC_AxisParameter.EnableLimitNeg;//EnableLimitPos;// .EnableLimitNeg;
		fbWriteParameter.Value := FALSE;
		fbWriteParameter.Execute := TRUE;
		if (fbWriteParameter.Done) THEN
			fbWriteParameter.Execute := FALSE;
			HomeState:= H_RESET_HL; 
		END_IF
		
	H_RESET_HL:
		// disable soft limits in order to be able to move the drive
		fbWriteParameter.ParameterNumber := MC_AxisParameter.EnableLimitPos;
		fbWriteParameter.Value := FALSE;
		fbWriteParameter.Execute := TRUE;
		if (fbWriteParameter.Done) THEN
			fbWriteParameter.Execute := FALSE;
			HomeState:= H_ENABLE; 
		END_IF
		
	H_ENABLE:
		// Make Sure drive is enabled
		fbPowerAxis.Enable :=  TRUE;
		fbPowerAxis.Enable_Positive := TRUE;
		fbPowerAxis.Enable_Negative := TRUE;
		IF fbPowerAxis.Status THEN
			HomeState:= H_MOVING;
		ELSIF fbPowerAxis.Error THEN
			HomeState := H_ERROR;
		END_IF

	H_MOVING:
		fbMoveRel.Execute := TRUE;
		IF fbMoveRel.Active  THEN
			(* axis is executing job but is not yet finished *)
			fbMoveRel.Execute := FALSE;
			(* leave this state and buffer a second command *)
			HomeState := H_MOVING2;
		ElSIF fbMoveRel.Done THEN
			fbMoveRel.Execute := FALSE;
			HomeState := H_MOVING;//2?
		ELSIF fbMoveRel.CommandAborted OR fbMoveRel.Error THEN
			fbMoveRel.Execute := FALSE;
			HomeState := H_CHECK;
		END_IF
	
	H_MOVING2:
		IF fbMoveRel.CommandAborted OR fbMoveRel.Error THEN
			HomeState := H_CHECK;
		END_IF	
		IF NOT ( Axis.Status.Moving) OR (fbMoveRel.Done) THEN //(fbMoveAxisABS.Done) AND (fbMoveAxisABS2.Done) THEN
			HomeState := H_MOVING;
			fbMoveRel.Execute := FALSE;	
		END_IF
	
	H_CHECK:
		//Check position lag monitoring error
		if (Axis.Status.ErrorID = 16#00004550)THEN 
			This^.q_stVGP.pv_xReset_SW := TRUE;
			HomeState := H_RESET;
		ELSE
			HomeState := H_ERROR;
		END_IF
	
	H_RESET:
		IF fbReset.Done THEN
			This^.q_stVGP.pv_xReset_SW := FALSE;
			HomeState := H_SET_POS;
		END_IF
	
	H_SET_POS:
	 // Set Current Position
		fbSetPosition.Position := 0;
		fbSetPosition.Execute := TRUE;
		IF ( fbSetPosition.Done ) THEN
			fbSetPosition.Execute := FALSE;
			HomeState:= H_WRITE_LL;
		ELSIF (fbSetPosition.Error) THEN
			HomeState := H_ERROR;
		END_IF

	
	H_WRITE_LL:
	// Re Enable the Soft limits	
		fbWriteParameter.ParameterNumber := MC_AxisParameter.AxisEnMinSoftPosLimit;//AxisEnMaxSoftPosLimit;// .AxisEnMinSoftPosLimit;
		fbWriteParameter.Value := TRUE;
		fbWriteParameter.Execute := TRUE;
		if (fbWriteParameter.Done) THEN
			fbWriteParameter.Execute := FALSE;
			HomeState:= H_WRITE_HL; 
		END_IF
		
	H_WRITE_HL:
	// Re Enable the Soft limits	
		fbWriteParameter.ParameterNumber := MC_AxisParameter.AxisEnMaxSoftPosLimit;
		fbWriteParameter.Value := TRUE;
		fbWriteParameter.Execute := TRUE;
		if (fbWriteParameter.Done) THEN
			fbWriteParameter.Execute := FALSE;
			HomeState:= H_DONE; 
		END_IF
		
	
	H_ERROR:
		//taken care of in the axis motion state machine
	H_DONE:
		//taken care of in the axis motion state machine

END_CASE

// Move backward to fully closed
fbMoveRel(
	Axis:= Axis , 
	Execute:= , 
	Distance:= rHomingDistance , 
	Velocity:= rHomingVelocity, 
	Acceleration:= , 
	Deceleration:= , 
	Jerk:= , 
	BufferMode:= MC_BlendingNext, 
	Options:= , 
	Done=> , 
	Busy=> , 
	Active=> , 
	CommandAborted=> , 
	Error=> , 
	ErrorID=> );
	
// Set Encoder Position
fbSetPosition(
	Axis:= Axis , 
	Execute:= , 
	Position:= 0 , 
	Mode:= FALSE, //Absolute
	Options:= , 
	Done=> , 
	Busy=> , 
	Error=> , 
	ErrorID=> );
	
// Write Parameters
fbWriteParameter(
	Axis:= Axis , 
	Execute:= , 
	ParameterNumber:= , 
	Value:= , 
	Done=> , 
	Busy=> , 
	Error=> , 
	ErrorID=> );
	
If ( fbWriteParameter.Error) OR (fbSetPosition.Error)(* OR (fbMoveRel.Error) *)THEN
	HomeState:= H_ERROR; 
	q_stVGP.eState := ERROR;
END_IF]]></ST>
      </Implementation>
    </Action>
    <Action Name="ACT_INIT" Id="{40c46368-4c5b-4c69-98b9-4f7d79c437f1}">
      <Implementation>
        <ST><![CDATA[{attribute no_check}
IF bInit THEN
	
(*
	(* init array with the interpolation points  *)
	(* 	fIn					 |		fOut		*)
	arrTable[1,1] := 0;			arrTable[1,2] := 0;
	arrTable[2,1] := 5;		    arrTable[2,2] := 135;
	arrTable[3,1] := 10;		arrTable[3,2] := 245;
	arrTable[4,1] :=  20;	    arrTable[4,2] := 405;
	arrTable[5,1] :=  30;	    arrTable[5,2] := 535;
	arrTable[6,1] := 40;		arrTable[6,2] := 689;
	arrTable[7,1] := 50;		arrTable[7,2] := 830;
	arrTable[8,1] := 60;	    arrTable[8,2] := 960;
	arrTable[9,1] := 70;	    arrTable[9,2] := 1095;
	arrTable[10,1] := 80;		arrTable[10,2] := 1225;
	arrTable[11,1] := 90;		arrTable[11,2] := 1415;
	arrTable[12,1] := 95;		arrTable[12,2] := 1495;
	arrTable[13,1] := 98;		arrTable[13,2] := 1559;
	arrTable[14,1] := 100;		arrTable[14,2] := 1645;
	*)
	
	(* init parameter struct *)
	stCTRL_LIN_INTERPOLATION_PARAMS.tCtrlCycleTime					:= T#10ms;
	stCTRL_LIN_INTERPOLATION_PARAMS.tTaskCycleTime					:= T#10ms;
	stCTRL_LIN_INTERPOLATION_PARAMS.nDataTable_NumberOfRows		:= INT_TO_UINT(14);

	(* set the addresses *)
	stCTRL_LIN_INTERPOLATION_PARAMS.pDataTable_ADR			:= ADR(arrTable);
	stCTRL_LIN_INTERPOLATION_PARAMS.nDataTable_SIZEOF		:= SIZEOF(arrTable);

	(* set the mode to ACTIVE --> normal operation *)
	eMode							:= eCTRL_MODE_ACTIVE;
	
	
	(* init array with the interpolation points  *)
	(* 	fIn					 |		fOut		*)
	 FOR iCounter:=1 TO 14 BY 1 DO
		arrTable_ENC[iCounter,1] := arrTable[iCounter,2];
		arrTable_ENC[iCounter,2] := arrTable[iCounter,1];		
	 END_FOR;
	(*
	arrTable_ENC[1,1] := 0;			arrTable_ENC[1,2] := 0;
	arrTable_ENC[2,1] := 135;		    arrTable_ENC[2,2] := 5;
	arrTable_ENC[3,1] := 245;		arrTable_ENC[3,2] := 10;
	arrTable_ENC[4,1] :=  405;	    arrTable_ENC[4,2] := 20;
	arrTable_ENC[5,1] :=  535;	    arrTable_ENC[5,2] := 30;
	arrTable_ENC[6,1] := 689;		arrTable_ENC[6,2] := 40;
	arrTable_ENC[7,1] := 830;		arrTable_ENC[7,2] := 50;
	arrTable_ENC[8,1] := 960;	    arrTable_ENC[8,2] := 60;
	arrTable_ENC[9,1] := 1095;	    arrTable_ENC[9,2] := 70;
	arrTable_ENC[10,1] := 1225;		arrTable_ENC[10,2] := 80;
	arrTable_ENC[11,1] := 1415;		arrTable_ENC[11,2] := 90;
	arrTable_ENC[12,1] := 1495;		arrTable_ENC[12,2] := 95;
	arrTable_ENC[13,1] := 1559;		arrTable_ENC[13,2] := 98;
	arrTable_ENC[14,1] := 1645;		arrTable_ENC[14,2] := 100;*)
	
	
	(* init parameter struct *)
	stCTRL_LIN_INTERPOLATION_PARAMS_ENC.tCtrlCycleTime					:= T#10ms;
	stCTRL_LIN_INTERPOLATION_PARAMS_ENC.tTaskCycleTime					:= T#10ms;
	stCTRL_LIN_INTERPOLATION_PARAMS_ENC.nDataTable_NumberOfRows		:= INT_TO_UINT(14);

	(* set the addresses *)
	stCTRL_LIN_INTERPOLATION_PARAMS_ENC.pDataTable_ADR			:= ADR(arrTable_ENC);
	stCTRL_LIN_INTERPOLATION_PARAMS_ENC.nDataTable_SIZEOF		:= SIZEOF(arrTable_ENC);
	
	(* reset the init flag *)
	bInit							:= FALSE;
	
END_IF;]]></ST>
      </Implementation>
    </Action>
    <Action Name="ACT_LIN_INTERPOLATION" Id="{e7858806-5112-4a56-b94a-17de81937dea}">
      <Implementation>
        <ST><![CDATA[{attribute 'no_check'}
fbCTRL_LIN_INTERPOLATION(
	fIn:= q_stVGP.rReqPosition , 
	fManValue:= 0, 
	bExtrapolate:= , 
	eMode:= eMode, 
	fOut=> , 
	bInIsGreaterThanMaxElement=> , 
	bInIsLessThanMinElement=> , 
	eState=> , 
	eErrorId=> , 
	bError=> , 
	stParams:= stCTRL_LIN_INTERPOLATION_PARAMS );
	
// Target position Calculation
rTargetPosition := LREAL_TO_REAL(fbCTRL_LIN_INTERPOLATION.fOut);
//rTargetPosition := LIMIT(rClosePosition, rTargetPosition, rOpenPosition);	
	
fbCTRL_LIN_INTERPOLATION_ENC(
	fIn:= Axis.NcToPlc.ActPos , 
	fManValue:= 0, 
	bExtrapolate:= , 
	eMode:= eMode, 
	fOut=>  , 
	bInIsGreaterThanMaxElement=> , 
	bInIsLessThanMinElement=> , 
	eState=> , 
	eErrorId=> , 
	bError=> , 
	stParams:= stCTRL_LIN_INTERPOLATION_PARAMS_ENC );
q_stVGP.i_iPosition := LREAL_TO_REAL(fbCTRL_LIN_INTERPOLATION_ENC.fOut);	
	]]></ST>
      </Implementation>
    </Action>
    <Action Name="ACT_MONITOR" Id="{b2627cf4-5128-42f5-94d5-145cc4fb3bde}">
      <Implementation>
        <ST><![CDATA[

IF (This^.q_stVGP.xBusy) THEN
	rPrevEncoderPosition:= This^.q_stVGP.rEnoder_Position;
ELSIF NOT((rPrevEncoderPosition < This^.q_stVGP.rEnoder_Position +rHyst) AND (rPrevEncoderPosition > This^.q_stVGP.rEnoder_Position -rHyst)) AND NOT( q_stVGP.eState =HOME)  AND NOT( q_stVGP.eState =ERROR) THEN
	  q_stVGP.eState := ERROR;
	  q_stVGP.pv_xHomed := FALSE;
	  This^.q_stVGP.pv_xError := TRUE;
	  This^.q_stVGP.sErrorMessage := 'Encoder Position Error';

END_IF

tErrorPresent(CLK:=q_stVGP.pv_xError);
IF tErrorPresent.Q THEN fbLogger(sMsg:=q_stVGP.sErrorMessage, eSevr:=TcEventSeverity.Error); END_IF

// Log valve motion
tAction(CLK:= q_stVGP.pv_xGo_SW);
IF tAction.Q THEN fbLogger(sMsg:='Valve commanded to move', eSevr:=TcEventSeverity.Info); END_IF


IF ePrevState <> q_stVGP.eValveControl THEN
	  CASE q_stVGP.eValveControl OF
		
		CloseValve:
			fbLogger(sMsg:='Valve set to Close.', eSevr:=TcEventSeverity.Info);
  		OpenValve:
			fbLogger(sMsg:='Valve set to Open.', eSevr:=TcEventSeverity.Info);
		PressureControl:
			fbLogger(sMsg:='Valve set to pressure control mode.', eSevr:=TcEventSeverity.Info);
		ManualControl:
			fbLogger(sMsg:='Valve set to manual control mode.', eSevr:=TcEventSeverity.Info);
	  END_CASE
	  ePrevState := q_stVGP.eValveControl;  
  END_IF
  ]]></ST>
      </Implementation>
    </Action>
    <Method Name="ConfigEncoder" Id="{a0127ca3-0984-4690-afad-2c3d152c6c9f}">
      <Declaration><![CDATA[METHOD ConfigEncoder : BOOL
VAR_INPUT
	EncoderMax: REAl; // Maximum encoder reading from fully closed to fully open
	invert: Bool; // Invert Encoder Counting Direction
END_VAR
VAR
	fbWriteParameter1: MC_WriteBoolParameter;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[rOpenPosition := EncoderMax;

// fEncScaleFactor  -  AxisEncoderScalingFactor
 
// bEncIsInverse  -              
if (invert) THEN
	fbWriteParameter1.ParameterNumber :=  MC_AxisParameter.AxisEncoderDirectionInverse;
	fbWriteParameter1.Value := True;
END_IF

// Write Parameters
fbWriteParameter1(
	Axis:= Axis , 
	Execute:= , 
	ParameterNumber:= , 
	Value:= , 
	Done=> , 
	Busy=> , 
	Error=> , 
	ErrorID=> );

]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_INIT" Id="{c3be5e37-dd4d-4591-8777-36b80934f389}">
      <Declaration><![CDATA[METHOD M_INIT : BOOL
VAR_INPUT
	arrTable	: ARRAY[1..14,1..2] OF FLOAT;
	arrTable_ENC : ARRAY[1..14,1..2] OF FLOAT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[(* init array with the interpolation points  *)
	(* 	fIn					 |		fOut		*)
	arrTable[1,1] := 0;			arrTable[1,2] := 0;
	arrTable[2,1] := 5;		    arrTable[2,2] := 135;
	arrTable[3,1] := 10;		arrTable[3,2] := 245;
	arrTable[4,1] :=  20;	    arrTable[4,2] := 405;
	arrTable[5,1] :=  30;	    arrTable[5,2] := 535;
	arrTable[6,1] := 40;		arrTable[6,2] := 689;
	arrTable[7,1] := 50;		arrTable[7,2] := 830;
	arrTable[8,1] := 60;	    arrTable[8,2] := 960;
	arrTable[9,1] := 70;	    arrTable[9,2] := 1095;
	arrTable[10,1] := 80;		arrTable[10,2] := 1225;
	arrTable[11,1] := 90;		arrTable[11,2] := 1415;
	arrTable[12,1] := 95;		arrTable[12,2] := 1495;
	arrTable[13,1] := 98;		arrTable[13,2] := 1559;
	arrTable[14,1] := 100;		arrTable[14,2] := 1645;
	
	
	(* init parameter struct *)
	stCTRL_LIN_INTERPOLATION_PARAMS.tCtrlCycleTime					:= T#10ms;
	stCTRL_LIN_INTERPOLATION_PARAMS.tTaskCycleTime					:= T#10ms;
	stCTRL_LIN_INTERPOLATION_PARAMS.nDataTable_NumberOfRows		:= INT_TO_UINT(14);

	(* set the addresses *)
	stCTRL_LIN_INTERPOLATION_PARAMS.pDataTable_ADR			:= ADR(arrTable);
	stCTRL_LIN_INTERPOLATION_PARAMS.nDataTable_SIZEOF		:= SIZEOF(arrTable);

	(* set the mode to ACTIVE --> normal operation *)
	eMode							:= eCTRL_MODE_ACTIVE;
	
	
	(* init array with the interpolation points  *)
	(* 	fIn					 |		fOut		*)
	arrTable_ENC[1,1] := 0;			arrTable_ENC[1,2] := 0;
	arrTable_ENC[2,1] := 135;		    arrTable_ENC[2,2] := 5;
	arrTable_ENC[3,1] := 245;		arrTable_ENC[3,2] := 10;
	arrTable_ENC[4,1] :=  405;	    arrTable_ENC[4,2] := 20;
	arrTable_ENC[5,1] :=  535;	    arrTable_ENC[5,2] := 30;
	arrTable_ENC[6,1] := 689;		arrTable_ENC[6,2] := 40;
	arrTable_ENC[7,1] := 830;		arrTable_ENC[7,2] := 50;
	arrTable_ENC[8,1] := 960;	    arrTable_ENC[8,2] := 60;
	arrTable_ENC[9,1] := 1095;	    arrTable_ENC[9,2] := 70;
	arrTable_ENC[10,1] := 1225;		arrTable_ENC[10,2] := 80;
	arrTable_ENC[11,1] := 1415;		arrTable_ENC[11,2] := 90;
	arrTable_ENC[12,1] := 1495;		arrTable_ENC[12,2] := 95;
	arrTable_ENC[13,1] := 1559;		arrTable_ENC[13,2] := 98;
	arrTable_ENC[14,1] := 1645;		arrTable_ENC[14,2] := 100;
	
	
	(* init parameter struct *)
	stCTRL_LIN_INTERPOLATION_PARAMS_ENC.tCtrlCycleTime					:= T#10ms;
	stCTRL_LIN_INTERPOLATION_PARAMS_ENC.tTaskCycleTime					:= T#10ms;
	stCTRL_LIN_INTERPOLATION_PARAMS_ENC.nDataTable_NumberOfRows		:= INT_TO_UINT(14);

	(* set the addresses *)
	stCTRL_LIN_INTERPOLATION_PARAMS_ENC.pDataTable_ADR			:= ADR(arrTable_ENC);
	stCTRL_LIN_INTERPOLATION_PARAMS_ENC.nDataTable_SIZEOF		:= SIZEOF(arrTable_ENC);]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_ValveControl" Id="{d751bf76-146a-4941-88f4-7263885a64c0}">
      <Declaration><![CDATA[METHOD M_ValveControl : BOOL
VAR_INPUT
	state:E_VCN; // Close, Open, Pressure, Manual
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[q_stVGP.eValveControl := state;]]></ST>
      </Implementation>
    </Method>
    <Method Name="SetEncoderMax" Id="{61fb5926-5bff-4b7f-8268-e746a917813f}">
      <Declaration><![CDATA[METHOD PUBLIC SetEncoderMax : BOOL
VAR_INPUT
	EncoderMax: REAl;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[rOpenPosition := EncoderMax;]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>