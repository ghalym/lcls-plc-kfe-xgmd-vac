<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4022.18">
  <POU Name="PRG_Purge" Id="{a79f4482-bdf5-4b0d-9d35-039b4e6b3713}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM PRG_Purge
VAR
	step: INT:=0;
	{attribute 'pytmc' := '
    pv: EM2K0:XGMD:sPURGE
	'}
	sMessage : STRING;
	
	{attribute 'pytmc' := '
    pv: EM2K0:XGMD:RESET
	'}
	bReset:BOOL := False;
	
	{attribute 'pytmc' := '
    pv: EM2K0:XGMD:PurgeError
	'}
	bError:BOOL := False;
	
	{attribute 'pytmc' :=' pv: EM2K0:XGMD:PURGE:SP1;
	field: HOPR 1000;
	field: LOPR 0;
	field: PREC 2;
	field: EGU "TORR";
	'}
	rPurge_SP1 :REAL :=0.01; 
	
	{attribute 'pytmc' :=' pv: EM2K0:XGMD:PURGE:SP2;
	field: HOPR 1000;
	field: LOPR 0;
	field: PREC 2;
	field: EGU "TORR";
	'}
	rPurge_SP2 :REAL :=0.1; 

	
	{attribute 'pytmc' :=' pv: EM2K0:XGMD:PURGE:REPEAT;
	'}
	NeedlePurgeRepeat	: INT:= 1;
	NeedleVlvPurgeTmr	: TON;	(* Declaration for the needle valve Purge timer *)
	tNeedlePurgeTime		: TIME:=T#5S;
	NeedlePurgeTime		: TIME:=T#5S;
	BurpET				: TIME;
	NeedlePurgeRun		: BOOL;
	NeedlePurgeDone		: BOOL;
	
	VCN_Timer	:TON;
	

	rt_reset: R_TRIG;
	
	// Timers
	VVC_80_Timer : TON;
	VVC_81_Timer : TON;
	VVC_82_Timer : TON;
	VVC_80_Time			: TIME:=T#30S;
	VVC_81_Time			: TIME:=T#5S;
	VVC_82_Time			: TIME:=T#5S;
	VCN_Time : TIME := T#5S;
	
	iVGP_POS: REAL:=0;
	

END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[(* 
PURGE CYCLE
The purge cycle consists of the following steps;
1. Close all gas valves 83-86 and Close Needle valve and switch off PID control
2. Wait till needle valve closes
3. Close VGP, to protect the Detector chamber in case a pressure spike on the roughing line stops the turbo.
4. PUMP DOWN MANIFOLD: Open VVC-80  then Open VVC82 for certain pressure on the baratron
5. Open VIC:81 and keep it open while the manifold pumps down to pressure set point for a certain time to avoid flukes then close VVC-80
 - THEN Fully open VGP:40
6. BURP NEEDLE VALVE: Once the manifold is pumped down, open the needle valve (burp) to evacuate gases that may be trapped in its mechanism
- this step is done gradually to avoid sending pressure spike into the detector
7. Close needle valve
8. Release VGP:40

*)


CASE step OF
		0: // READY STATE
		sMessage:= 'Purge Ready';
		bError := FALSE;
		bPurgeActive := FALSE;
		VCN_50.i_xPurge := FALSE;
		IF (bStartPurge_sw) Then
			step:=10;
			bGo :=FALSE;
			bPurgeActive := true;
			bPurgeDone := false;
			iVGP_POS := VGP_50.q_stVGP.rReqPosition;
			sMessage:= 'Purge Start';		
		END_IF

10: // start purge sequence by closing all gas valves and needle valve
	VVC_80.M_Set_OPN_SW(FALSE);
	VVC_81.M_Set_OPN_SW(FALSE);
	VVC_82.M_Set_OPN_SW(FALSE);
	VVC_83.M_Set_OPN_SW(FALSE);
	VVC_84.M_Set_OPN_SW(FALSE);
	VVC_85.M_Set_OPN_SW(FALSE);
	VVC_86.M_Set_OPN_SW(FALSE);
	VCN_50.M_ValveControl(E_VCN.CloseValve);
	IF   (NOT VVC_80.iq_stValve.q_xOPN_DO) AND (NOT VVC_81.iq_stValve.q_xOPN_DO)  AND (NOT VVC_82.iq_stValve.q_xOPN_DO)
			AND (NOT VVC_83.iq_stValve.q_xOPN_DO) AND (NOT VVC_84.iq_stValve.q_xOPN_DO) AND (NOT VVC_85.iq_stValve.q_xOPN_DO) AND (NOT VVC_86.iq_stValve.q_xOPN_DO) THEN
		step:= 20;
		sMessage:= 'Prep: All valves are closed';
	END_IF
	
20: //Close Needle valve 
	VCN_50.M_ValveControl( E_VCN.CloseValve);
	//sMessage:= 'Prep: Needle Valve is closed';
	// wait for a period of time to ensure that the Valve is fully closed
	IF (VCN_Timer.Q) THEN
		step:=30;
		sMessage:= 'Prep: Needle Valve is closed';
	END_IF
	
	
30: //Fully close VGP:40
	VGP_50.M_ValveControl(E_VCN.CloseValve);
	VGP_50.M_SetGoSw(TRUE);
	IF NOT(VGP_50.q_stVGP.eState = E_MoveState.READY)THEN // wait until the VGP Starts moving
		step:=31;
		sMessage:= 'Prep: VGP to fully closed';
	END_IF
	if (VGP_50.q_stVGP.pv_xError ) OR NOT (VGP_50.i_xExtIlkOK) OR NOT (VGP_50.q_stVGP.pv_xHomed) THEN
		step:=900+step;
	END_IF
31: 
	IF (VGP_50.q_stVGP.eState = E_MoveState.READY ) THEN // wait until the VGP motion is done
		step:=40;
		sMessage:= 'Prep: VGP is closed';
	END_IF
	if (VGP_50.q_stVGP.pv_xError )then
		step:=900+step;
	END_IF
	
40: // open vavle 80 to pump down all the way to the needle valve
	//VVC_80.M_Set_OPN_SW(TRUE);
	//if (VVC_80.iq_stValve.q_xOPN_DO ) THEN
	step:=41;
	//END_IF
	
41: //PUMP DOWN MANIFOLD: Open VIC82 for a certain peroid of time or till certain pressure
	VVC_82.M_Set_OPN_SW(TRUE);
	sMessage:= 'Pumping down: VVC82 is open';
	if (VVC_82.iq_stValve.q_xOPN_DO) AND (VVC_82_Timer.Q) AND (GCM_80.PG.rPRESS <= rPurge_SP1) THEN
		step:=50;
	END_IF

50:// Open VIC:81 and keep it open while the manifold pumps down to pressure set point
	VVC_81.M_Set_OPN_SW(TRUE);
	sMessage:= 'Pumping down:  VVC81 and VVC82 are open';
	IF (VVC_81.iq_stValve.q_xOPN_DO ) AND (VVC_81_Timer.Q) AND (GCM_80.PG.rPRESS <= rPurge_SP2) THEN // or a certain pressure reading and check timeouts
		step:=51;
	END_IF
	
51: // open vavle 80 to pump down all the way to the needle valve
	VVC_80.M_Set_OPN_SW(TRUE);
	if (VVC_80.iq_stValve.q_xOPN_DO ) THEN
	step:=52;
	END_IF	
	
52:// Open VIC:81 and keep it open while the manifold pumps down to pressure set point
	VVC_81.M_Set_OPN_SW(TRUE);
	sMessage:= 'Pumping down:  VVC80, VVC81 and VVC82 are open';
	IF (VVC_81.iq_stValve.q_xOPN_DO ) AND (VVC_80_Timer.Q) AND (GCM_80.PG.rPRESS <= rPurge_SP2) THEN // or a certain pressure reading and check timeouts
		step:=54;
	END_IF

	
54: //Close VIC:81 and VIC:82
	VVC_80.M_Set_OPN_SW(false);
	VVC_81.M_Set_OPN_SW(false);
	VVC_82.M_Set_OPN_SW(false);
	sMessage:= 'Pumping down complete: valves are closed';
	IF (NOT VVC_80.iq_stValve.q_xOPN_DO) AND(NOT VVC_81.iq_stValve.q_xOPN_DO) AND(NOT VVC_82.iq_stValve.q_xOPN_DO) THEN
		step:=55;
	END_IF

55: //Fully close VGP
	VGP_50.M_ValveControl(E_VCN.OpenValve);
	IF NOT(VGP_50.q_stVGP.eState = E_MoveState.READY ) THEN // wait until the VGP Starts moving
		step:=56;
		sMessage:= 'Prep: VGP to fully open';
	END_IF
	if (VGP_50.q_stVGP.pv_xError ) OR NOT (VGP_50.i_xExtIlkOK) OR NOT (VGP_50.q_stVGP.pv_xHomed) THEN
		step:=900+step;
	END_IF
56: 
	IF (VGP_50.q_stVGP.eState = E_MoveState.READY ) THEN // wait until the VGP motion is done
		step:=60;
		sMessage:= 'Prep: VGP is Open';
	END_IF
	if (VGP_50.q_stVGP.pv_xError )then
		step:=900+step;
	END_IF

60: //BURP NEEDLE VALVE: Once the manifold is pumped down, open the needle valve (burp) to evacuate gases that may be trapped in its mechanism
	VCN_50.M_ValveControl(E_VCN.PressureControl);
	VCN_50.i_xPurge := TRUE;
	VCN_50.i_ReqPos := 15;
	sMessage:= 'VCN Burp: VCN to 15%';
	// wait for a period of time to ensure that the Valve is fully closed
	IF (NeedleVlvPurgeTmr.Q) THEN
		step:=61;
	END_IF
	
61:
	VCN_50.i_xPurge := TRUE;
	VCN_50.i_ReqPos := 19; 
	sMessage:= 'VCN Burp: VCN to 19%';
	IF (VCN_Timer.Q) THEN
		step:=62;
	END_IF
	
62:	//BURP NEEDLE VALVE: Once the manifold is pumped down, open the needle valve (burp) to evacuate gases that may be trapped in its mechanism
	VCN_50.i_xPurge := TRUE;
	VCN_50.i_ReqPos := 25;
	sMessage:= 'VCN Burp: VCN to 25%';
	// wait for a period of time to ensure that the Valve is fully closed
	IF (NeedleVlvPurgeTmr.Q) THEN
		step:=63;
	END_IF
	
63:
	VCN_50.i_xPurge := TRUE;
	VCN_50.i_ReqPos := 31; 
	sMessage:= 'VCN Burp: VCN to 31%';
	IF (VCN_Timer.Q) THEN
		step:=64;
	END_IF	
	
64: 
	VCN_50.i_xPurge := TRUE;
	VCN_50.i_ReqPos := 39; 
	sMessage:= 'VCN Burp: VCN to 39%';
	IF (NeedleVlvPurgeTmr.Q) THEN
		step:=65;
	END_IF
	
65: 
	VCN_50.i_xPurge := TRUE;
	VCN_50.i_ReqPos := 49; 
	sMessage:= 'VCN Burp: VCN to 49%';
	IF (VCN_Timer.Q) THEN
		step:=66;
	END_IF
	
66: 
	VCN_50.i_xPurge := TRUE;
	VCN_50.i_ReqPos := 62; 
	sMessage:= 'VCN Burp: VCN to 62%';
	IF (NeedleVlvPurgeTmr.Q) THEN
		step:=67;
	END_IF
	
67: 
	VCN_50.i_xPurge := TRUE;
	VCN_50.i_ReqPos := 78; 
	sMessage:= 'VCN Burp: VCN to 78%';
	IF (VCN_Timer.Q) THEN
		step:=68;
	END_IF

68: 
	VCN_50.i_xPurge := TRUE;
	VCN_50.i_ReqPos := 100; 
	sMessage:= 'VCN Burp: VCN to 100%';
	IF (NeedleVlvPurgeTmr.Q) THEN
		step:=70;
	END_IF
	
70: //Close Needle valve 
	VCN_50.M_ValveControl(E_VCN.CloseValve);
	sMessage:= 'VCN Burp Complete: VCN to 0%';
	// wait for a period of time to ensure that the Valve is fully closed
	IF (VCN_Timer.Q) THEN
		step:=80;
	END_IF

80: // Repeat 
	IF (NeedlePurgeRepeat > 0) THEN
		NeedlePurgeRepeat := NeedlePurgeRepeat-1;
		step:= 60;
	ELSE
		NeedlePurgeRepeat := 1;
		step:=90;				
	END_IF
	

90: //Release VGP:40
	VGP_50.M_ValveControl(E_VCN.ManualControl);
	VGP_50.i_ReqPos:= iVGP_POS; //50% open
	VGP_50.M_SetGoSw(TRUE);
	sMessage:= 'Post: VGP to previous position';
	IF NOT(VGP_50.q_stVGP.eState = E_MoveState.READY ) THEN // wait until the VGP encoder reads Open //use motion ready
		step:=91;
	END_IF
	if (VGP_50.q_stVGP.pv_xError )then
		step:=900+step;
	END_IF
	
91: 
	IF (VGP_50.q_stVGP.eState = E_MoveState.READY ) THEN // wait until the VGP encoder reads Open //use motion ready
		VGP_50.M_ValveControl(E_VCN.ManualControl);
		VGP_50.i_ReqPos:= 0;
		VGP_50.M_SetGoSw(FALSE);
		step:=100;
		sMessage:= 'Purge Complete';
	END_IF
	if (VGP_50.q_stVGP.pv_xError )then
		step:=900+step;
	END_IF
  
100: // DONE
	bStartPurge_sw := false;
	bPurgeActive := false;
	bPurgeDone := TRUE;
	VVC_80.M_Set_OPN_SW(false);
	VVC_81.M_Set_OPN_SW(false);
	VVC_82.M_Set_OPN_SW(false);
	VVC_83.M_Set_OPN_SW(false);
	VVC_84.M_Set_OPN_SW(false);
	VVC_85.M_Set_OPN_SW(false);
	VVC_86.M_Set_OPN_SW(false);
	VCN_50.M_ValveControl(E_VCN.CloseValve);
	VCN_50.i_xPurge := FALSE;
	VGP_50.M_ValveControl(E_VCN.ManualControl); 
	// reset selected gas to none
	SelectedGas := E_GasType.none;
	step :=0;
	
900: //Error
    bStartPurge_sw := false;
	bPurgeActive := false;
	bPurgeDone := FALSE;
	bError := TRUE;
	VVC_80.M_Set_OPN_SW(false);
	VVC_81.M_Set_OPN_SW(false);
	VVC_82.M_Set_OPN_SW(false);
	VVC_83.M_Set_OPN_SW(false);
	VVC_84.M_Set_OPN_SW(false);
	VVC_85.M_Set_OPN_SW(false);
	VVC_86.M_Set_OPN_SW(false);
	VCN_50.M_ValveControl(E_VCN.CloseValve);
	VCN_50.i_xPurge := FALSE;
	VGP_50.M_ValveControl(E_VCN.ManualControl); // CLOSE or OPEN to pump down
	sMessage:= 'Purge Error: Interlock';
END_CASE


//shouldn't be here
(*
if (bPurgeActive) then
	VVC_83.i_xExtILK_OK := VVC_84.i_xExtILK_OK := VVC_85.i_xExtILK_OK := VVC_86.i_xExtILK_OK := false;
END_IF
*)

//Errors
if (step >900 ) Then
	//Error
    bStartPurge_sw := false;
	bPurgeActive := false;
	bPurgeDone := false;
	bError := TRUE;
	VVC_80.M_Set_OPN_SW(false);
	VVC_81.M_Set_OPN_SW(false);
	VVC_82.M_Set_OPN_SW(false);
	VVC_83.M_Set_OPN_SW(false);
	VVC_84.M_Set_OPN_SW(false);
	VVC_85.M_Set_OPN_SW(false);
	VVC_86.M_Set_OPN_SW(false);
	VCN_50.M_ValveControl(E_VCN.CloseValve);
	VGP_50.M_ValveControl(E_VCN.ManualControl);
	sMessage:= CONCAT('Purge Error: ',TO_STRING(step));
END_IF

rt_reset(CLK:= bReset);
IF rt_reset.Q THEN Step:=100; bReset:=False; bPurgeDone:=False; END_IF

//Timers
VVC_80_Timer(IN:=(step = 52), PT:=VVC_80_Time);
VVC_81_Timer(IN:= (step = 50) , PT:=VVC_81_Time);
VVC_82_Timer(IN:= (step = 41), PT:=VVC_82_Time);
VCN_Timer(IN:= (step = 20) OR (step = 61)  OR (step = 63)  OR (step = 65)  OR (step = 67) OR (step = 70), PT:=VCN_Time);
NeedleVlvPurgeTmr(IN:= (step = 60) OR (step = 62)  OR (step = 64)  OR (step = 66)  OR (step = 68), PT:=NeedlePurgeTime );

//
IF (bStartPurge_sw) THEN bGo :=FALSE; END_IF
/// If at any point the VGP interlocked or in an error state, we stop purge.

IF ((VGP_50.q_stVGP.pv_xError ) OR NOT (VGP_50.i_xExtIlkOK)) AND (bPurgeActive)  AND (step >=55) AND (step <=70) THEN
		step:=900;
END_IF
IF NOT (VCN_50.i_xExtIlkOK) AND (bPurgeActive) AND (step >=60) AND (step <=70) THEN
		step:=900;
END_IF

IF (NOT (fb_EM2K0_XGMD_PRT_50.stPump.eState = E_PumpState.pumpRUNNING)) AND (bPurgeActive) THEN
		step:=900;
END_IF]]></ST>
    </Implementation>
  </POU>
</TcPlcObject>